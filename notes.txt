
/. behaviour:
  /. delete items easily
  /. no leaks in terms of items without an active id
/. plans:
  \. keep an Arc<()> in ids and items
    . items can have a weak<()>
    . this would still need a pass through whole vec of items to find out who should be removed
  \. keep an Arc<ActionChannel> in ids
    . ActionChannel will impliment a drop method that will send a message to ContentManager to delete the item.
    . disadvantage is a whole lot of Arc overhead
  \. instead of the Arc<ActionChannel>, impliment Clone and Drop on ActionChannel such that they send a message to
    ContentManager to add/remove 1 from counter and remove element if counter is zero
    \. remove the Copy trait from ids
    \. disadvantage is that there will be a lot of add/remove messages
  /. Register ids
    /. impliment register() and unregister() on ContentManager that keeps a counter in ContentEntry
    /. when dropping something, call unregister() on all its related ids
    /. if counter zero while unregistering, call the unregister() for all its related ids

/. behaviour:
  /. have a lot of different kinds of content providers
/. plan:
  /. each a seperate struct with trait implimentation for ContentProvider
    /. can use macros for boilerplate methods
    \. maybe downcast trait objects if needed (maybe downcasting crates? (any?))
    . a few implimentations can know about the yt stuff, so it can me more integrated

/. behaviour:
  /. how do menu and edit
/. plan:
  \. global id has a menu varient(with selected index) (as onlt the index for main stuff is stored in ContentProvider)
    and it fetches the second last element and opens menu on that
    . can't do multiple layers of menus/edits this way tho.
  /. save context in globalContent and pass in menu/edit funcs. which may replace the context in from the content stack using
    actions. on going back, match GC, if menu, context.pop

\async?
  \. not worth doing in this project as the tokio::fs stuff is built with std::fs in another thread (atleast the part i saw)
    so would be simpler to just manage a seperate thread
    . but things might get simpler
  \. and the ytdl/ytmusic stuff isnt async any way

\. behaviour:
  \. show images on terminal
\. plan:
  \. terminal window size/terminal xy => get the terminal block width to heighy ratio ??
  \. maybe get the terminal font and check the height to width ratio of it?
  /. what does sixel say for the sizes?
  \. try printing blocks and checking dimension https://en.m.wikipedia.org/wiki/Block_Elements

/. behaviour:
  /. better way to choose and do image printing
/. plan:
  /. a enum that chooses the printer that impliments a printer trait
    /. disadvantages:
      /. have to maintain 2 different sets of enums/structs whatever
      /. harder to disable stuff with cfg features
  \. have a fake enum that that impliments printer or something and that just replaces itself with a actual printer when its methods are called
    \. disadvantages:
      \. same as the above method

/. behaviour:
  /. no lag cuz of printing image
/. plan:
  /. print image only if something resized, something updated in the player block
    /. size changes
    /. image changes
    /. redraw requested
  \. print from another thread

/todo:
  /. less complexity in ContentManager code
/plan:
  /. there needs to be 2 different ids, one that can go in content_stack.stack, and another that can have a menu/edit.
    it does not make sense to do literally anything else on a song that can be done on a provider/notifier and stuff

/. behaviour:
  /. be able to instruct the ui part to show something in some specific way. like "dont show numbers here." or
    "highlight this one in blue"
/. plan:
  \. use custom types/enums wrappers and wrap the special formatted ones with these types
    \. pass these to app, which then uses the backend to render these
    \. this would no longer mean that the two parts are decoupled tho.
    \. but well what else can i do?
    \. the wrappers can maybe take multiple things, like maybe
      wrapper{texts: Vec<wrapper{text, format_type: highlighted}>, overallformat_type: numbered}
    \. maybe repurpose GetNames for this
  /. make all providers impliment a render method that directly uses the backend stuff to render stuff.
    /. but ui in providers this way (its not much better the other way anyway)
  /. use the tui-rs stuff directly and send in the formatted text directly
    \. this means ui is also done in ContentManager
    \. maybe add a type that handles the ui here and try not to leak stuff outside it.
    \. also use enums to let the ui part handle both formatted and unformatted types

/. behaviour:
  /. fire actions from ContentProviders and receive the results back
/. plan:
  /. any actions that request data will have a callback function that will receive &mut ContentProvider and the data or something and
    may return another action
  /. same can be applied for EnableEditing
  /. callback can be enum like Callback::OnContentProvider {f: FOnce(cp: &mut ContentProvider, data: ?), id: ContentProviderID}
    /. execute using Callback::apply(self, ch: &ContentManager) -> Action

/. behaviour:
  /. doing yt actions
/. plan:
  \. create a seperate ytaction for each thing that someone else might want to do, and impliment a resolve function for the data
    and send more actions to finally complete the action that was meant to happen
    . disadvantages:
      . code is split between yt stuff and content providers.
      . yt stuff know what content providers want
    . advantage:
      . backend for getting the yt stuff is abstracted away
      . will be easy to change/swap the backend as just the yt stuff is to be rewritten
  \. ytactions with callback functions for doing stuff with the raw data that YTHandler returned
    . advantages:
      . logic is not split as much.
      . as raw data is received, ContentProviders can parse just what they need at that point.
    . disadvantages:
      . content providers know about the backend stuff
  /. if trait ContentProvider
    /. a few implimentations can know about the yt stuff. others do not need to

/todo:
  /. move logic to providers from actions
/plan:
  /. use callback funcs to generate actions
  /. move the yt parsing logic to the providers
    /. even the python code should come from providers

/. behaviour:
  /. work without any setup
/. plan:
  /. ytmusicapi has a non-signin thing. see if it can be used, else disable it
  /. add a default printer and a builder that chooses a backend that is valid for the terminal

/. behaviour:
  /. set markers on stuff
/. plan:
  /. pass everyting in content to providers and let them handle how to display what marker
    . advantages:
      . more flexible
  \. store id and some info about marker placement in Item and let the type adding the marker just push the marker
    . advantages:
      . all providers do not have to impliment how to add all the markers
        . ig the code duplication still needs to be handled. doing that smartly should solve this problem too
    . disadvantages:
      . less flexible
      . unsorted markers for same types in even for same provider

/. behaviour:
  . save state easily
  . load state easily
/. plans:
  \. save only the MainProvider
    . can grab MainProvider id from content_stack[0]
    . go through all ids in main_provider, keep 2 lists of ids, one for songs, another for song_providers.
      go through all song_providers one by one and add its stuff to these lists. finally dump all of this in db
    . disadvantage is that temporary stuff needs to tell if its worth saving or no
  \. save all of the non temporary stuff
    . this would need dropping everything from temp_content_providers including its exclusive songs before its saved
    . or this would need another ContentManager for temp_songs
      . and also would need to move all stuff that is moved to non_temporary
    . a strategy to remove both temporary lists is to make ContentEntry save if its temporary or not.
      . everything that is moved into something else which is not temp, has its state saved as non_temp
      . but, add a temp song to something non-temp, then remove it from the non-temp. and now its only in the original
        temp thing. so it will be saved but it should not be saved
  /. if ActionChannel + (custom Clone, Drop / Register ids)
    \. save all the main temp stuff in temp_content_providers and all its stuff in non_temp. just before saving,
      drop temp_content_providers and execute the messages till there are none left. now just save everything
      including MainProvider
      . but now MainProvider has a few ids which are not active. so just replace these with new ones when MainProvider
        gets loaded next time
    /. since all the main temp stuff is supposed to start in MainProvider, just yeet the temp_content_providers and save
      everything in non_temp. now just drop the temp stuff from MainProvider before saving

/. behaviour:
  . multiline items (like songs with name, artist on different lines)
/. plan:
  . already available in tui-rs + system for it is implimented as ListBuilder

/. behaviour:
  . display trait but less code duplication in its implimentation
/. plan:
  \. default trait implimentation using SongProvider::songs/CPProvider::providers
   . can't do edit/menu this way tho
  \. simple Fn(Option<&Vec<SongId>>, Option<&Vec<ContentProviderID>>) -> _
    . maybe these as associated functions and other CPs can borrow these functions
  /. implemented some functions in DisplayContext

/. behaviour:
  /. make sure no dangling ids/leaked items
/. plan:
  /. check before quitting (optionally)
    /. prepare 2 lists, 1 for every item, another for every strong id
    /. check if the item id counts match the number of ids and no extra ids left to check

/. bug1:
  /. pasting random providers into queue works, but then crashes when trying to play something from it
/. sol:
  \. YankDestination trait, just as a marker trait to allow/disallow pasting stuff to QueueProvider
    . but what about cut/copy pasting queues. this is required to move items within the provider
  \. maybe some providers should check for what type the yanked stuff is.
    . how tho?
    . maybe using something like what is done in bevy's ecs. (idk how it works yet)
      . QueueProvider::yankable_item::<Queue>()
  /. sol in behaviour1

/. bug2:
  /. pasting songs/providers to providers that can not store them crashes app
/. sol:
  /. some kinda system in EditManager that can refuse to paste stuff while also notifying user
    . use the status bar and the notification whatever area for such notifs
    . this can also be used to refuse pasting things like non-Queues in QueueProvider
  /. partial sol in behaviour1

/. bug:
  /. id saved in current_queue + content modified (yt_explorer new search) + next song  -> plays a incorrect song
/. sol:
  /. current_queue only points to some provider in a QueueProvider
    /. QueueProvider clones the original ContentProvider

/. bug:
  /. queues should store what song they played in last session
  /. queues also play bad songs if the cursor is simply moved to another location within the queue
/. sol:
  /. keep another index for playing song
  /. also display playing songs within queues in different color

todo:
  . better error handling
plan:
  . use enums for error handling + see what errors should/should not panic/unwrap
  . maybe have a channel to send these errors on, and notify the users about some of these errors

potential bug:
  . ContentProvider methods like select_editable take self_id but does not enforce that the id is of self
sol:
  . a wrapper around ContentProvider like Registered<T> that has its id saved and it enforces that the method receives correct id
    . eh too much hassle
  . maybe T from ContentManager<T> can impliment a trait that makes T save the id and manage it

behaviour:
  . config file to decide style/colors (theme files ig)
plan:
  . impliment serialize and deserialise (or just ToString/FromString) on new type say DisplayConfig
  . print it out in the file as if its on the terminal but print the colors where there would be text.
  . simply changing these colors should change the color in the program
  . this happens per implimentation of Display ig.
  . use some register<DisplayConfig: DisplayConfigTrait>() func or something to add the default config file in config folder
  . doing register<_>() does something and loads the config and stores it somewhere, then do get_config<_>() -> &DisplayConfig

behaviour:
  . cp typing but better
plan:
  . 3 callbacks from cp
    . apply
    . update typed stuff realtime
    . set cursor
  . do it completely in ListBuilder somehow

behaviour:
  . display but no unreachable!() calls
plan:
  . more display traits for ContentProviders for normal/edit/menu
    \. auto display implimentation for combinations of these
    \. like "impl Display for T where T: Edit + Menu"
      \. different implimentations will collide
    . impliment display for ContentProvider which uses self.as_edit() and stuff

behaviour:
  . no accidents with ContentRegister
    . no dangling ids
    . no memory leaks
plan:
  . all ids that need to be saved inside something is wrapped in a non Copy type that can only be created by ContentRegister
    . it can be enforced that only the wrapped are saved as the struct fields will have the wrapped type (song: Wrapped<SongID>)
    . impliment a drop on this type so it logs error if dropped (idk if this will work as i assume)
    . this id should not be dropped, instead it should be converted back into the non-wrapped version
    . a wrapped id can provide non wrapped ids for passing into other functions

behaviour:
  . searching system like in lf
plan:
  . pressing / starts capturing, Enter ends capturing

bug:
  . yank + cut stuff from yt_explorer -> do a new search on same provider -> undo -> pastes the stuff here, which is wrong
    . (pasting is not really allowed in this example, but changing the position of items need this featue)
sol:
  . when new search -> just increment the generation of the counter
    . make sure that doing this does not cause any errors tho.

bug:
  . yanking something whose multiple copies exist in some provider displays marker on all the copies (just a displaying bug)
sol:
  . maybe do not allow multiple copies in same provider? donno

bug:
  . yanking stuff from one provider also highlights stuff in other providers (display bug)
sol:
  . check if parent id is same before adding yank markers

bug:
  . tring to paste unloaded stuff that (needs some time to load in a seperate thread) inside QueueProvider fails
    . QueueProvider can't convert it into a Queue as it does not have any songs yet
sol:
  . chainable actions? a.chain(a2) executes a2 after a has completed. no matter when a completes
    . how?
    . non parallel actions -> just add it to list
      . what if a parallel action is hidden inside non-parallel action tho?
    . parallel actions -> add some kinda callback action if completed

bug:
  . crashes while converting from deserialised yt stuff to non yt stuff
  . example, converting a YTDLPlaylistSong to Song
    . YTDLPlaylistSong does not always have everything required to convert (the field is None). or sometimes the song is simply unavailable with bs data
sol:
  . use TryInto instead of Into for conversions

behaviour:
  . better yt_explorer titles (when links are entered)
sol:
  . fetch playlist/video title and use it in the yt_explorer title

behaviour:
  . more convinient QueueProvider
plan:
  . should be a ring buffer or something. not a vec
  . should allow to pin some Queues to the top. (not deallocated automatically)
    . marked with some nice things

behaviour:
  . better behaved queues
    . for example, file explorer loads all songs again from disk even if they are in queue. + playing a song from a folder creates a new
      queue after every restart
plan:
  . ??
  \. maybe queues should have weak IDs
    . but then searches (temporary providers) cannot be stored in queues. which is bad

behaviour1:
  . edit manager stuff
plan:
  /. pressing shortcut keys after selecting stuff calls apply_yank(YankType::..). stuff gets cut/copied from source into editor::Edit stored in EditManager.
  /. pasting stuff should paste it before/after the cursor
  /. undo should remember the positions
    /. kinda tedious as current implimentations of providers do not allow for mixing the song/provider lists
  . unapplied cuts/copies should be filtered into a seperate clipboard thing for conviniently pasting it to other stuff
    . to figure out if some cut/copy is not applied, just compare the Yanker of Edit::Yanked and Edit::Pasted across all edits
  /. edits might contain ids from stuff that were from the temporary providers from the last session.
    \. just clear edits on restart
    /. instead of not saving all ids, save even the Yanker.yanked_from (non-weak) and let it sit there (even if its not actually usable in the app)
      /. when the edit deallocates, it will automatically be cleared.
      /. since EditManager.yank is weak, care should be taken to not make its yanked_from id non-weak
    \. do the edits that are possible and ignore the rest
      . really?
      . ids here are non-weak anyway
  . trying to cut something but it fails, then Yanker should not reset as copying can still be done
  . good yank-paste system
    . examples
      /. pasting non-Queue providers in QueueProvider should convert them into Queue.
      . pasting a bunch of songs in QueueProvider or anywhere which cannot contain songs can ask for a prompt to create a
        new Provider that can contain songs inside that Provider
      . pasting providers into something that can only store songs -> unravel the provider's songs into the destination provider
      . pasting online songs in FileExplorer downloads and saves them
      . pasting songs in FileExplorer moves them in the FS (option to turn it off)
      . pasting songs from other providers and stuff into ArtistProvider should add it to the tracking system like in thrombe/musimanager
    /. sol bug1, bug2: pasting things in different providers should do special things
    /. this needs to be a general, flexible and powerful system
    \. doing this means that new ids will be created for new songs/providers. so will need more work with the undo system
  /. undoing and redoing should also handle the selections
    /. selections + undo yank -> should result in previous yank selections being restored. but what to do with current selections?
      /. just yeet current selections
      \. push current selections in undo_stack. but this makes things complicated. some undo + select + undo yank -> leads to non-intuitive behaviour???
  \. service::editors::Edit::IndexChange { provider: ID, from: usize, to: usize },
    /. this is not really possible when theres both songs and providers, as songs and providers are saved in seperate lists with no way to have them change their posiitions
    /. how these are stored depends on the implimentation of the provider. so ig it should handle how things are pasted.
      (with default behaviour provided by this enum's associated methods or something to prevent code duplication)
    /. maybe don't allow to change position, instead just make do with cut paste, and let the provider handle where it wants to add (while providing the cursor pos)

behaviour:
  . an online artist song tracker like in thrombe/musimanager
plan:
  . todo

behaviour:
  . predictable behaviour when pressing next a bunch on online playlists
plan:
  . add a timestamp to the request and save it somewhere in the content manager for the image
  . or maybe have a request hash (or just a big random number) associated with the request and save the latest one somewhere just before
    making the request in parallel. if this number does not match, discard the request.
    . tho this does not need to be done for every request. just for the ones that affect the ui stuff (maybe just the image?? is there anything else?)

behaviour:
  . play songs using rust and not gstreamer
plan:
  . can seek directly using
    . /home/issac/0Git/tests/python/download_yt_song_from_uri.ipynb
  . make a symphonia::core::MediaSource that buffers in chunks and uses async stuff (maybe) to fetch the song data as requested by seek/read
    and just pretend that its a normal file
  . play song something like ./mess/symphonia-rodio-test
  . symphonia does not support qpus tho
    . maybe try ffmpeg for everything then?
      . https://crates.io/crates/ffmpeg-next
      . https://crates.io/crates/ffmpeg
      . https://crates.io/crates/rusty_ffmpeg
      . https://crates.io/crates/stainless_ffmpeg

behaviour:
  . faster file_explorer stuff
plan:
  . dust uses rayon. maybe try it
    . rayon::iter::ParallelBridge -> https://docs.rs/rayon/latest/rayon/iter/trait.ParallelBridge.html#tymethod.par_bridge
    . num threads -> https://github.com/rayon-rs/rayon/blob/master/FAQ.md#how-many-threads-will-rayon-spawn
    . relevant dust code -> https://github.com/bootandy/dust/blob/164bec71a3a8a857e964d3f975e3a833f40ba3ef/src/dir_walker.rs#L123

image art improvements:
  \. konsole impliments kitty graphics protocol?
    \. https://sw.kovidgoyal.net/kitty/graphics-protocol/
    /. despite what the link says, konsole returns "kittyGi=0;ENOTSUPPORTED:" when trying to force print using kitty protocol using https://github.com/atanunq/viuer
  . better ansi art with arbitary unicode chars?
    . https://github.com/mafik/ansi-art
  . rusty sixel?
    . https://crates.io/crates/sixel-image
      . (didn't test as of 05/08/22)
    . https://github.com/meh/rust-sixel
      . seems quite fast (more testing needed)
      . tests/sixel/rust-sixel "cargo run --release --example test"
    . https://github.com/o2sh/onefetch/blob/main/src/ui/image_backends/sixel.rs
      . tests/sixel/some_code_from_onefetch (seems a bit slower than rust-sixel. but more testing needed)
  . ueberzug support:
    . maybe just use it with pyo3
    . https://github.com/Adit-Chauhan/Ueberzug-rs
  \. eh
    . https://github.com/oza6ut0ne/printimg-rust
    . ramdom 3d things?
      . https://github.com/ecumene/rust-sloth


. plan
  . import relevent notes from thrombe/musimanager
  . a global settings
    . different image modes
    . other setting like the ones in thrombe/musimanager
  . have a dbg runtime variable screen to change numbers without having to recompile (maybe a debug content provider)
    .make sliders.
  . a floating widget
    . pressing a shortcut brings up another terminal window on the current screen with with a few options
      for switching songs and stuff
      . somehow add way to apply certain WM property things like keep_above_others and stuff from opts
    . this can be another mode that the program can run in (cli args)
    . use a files to share state between main app and this window
  . musitags
    . apply tags to songs/song_providers
    . tags like: fav, good, maybe_good, pop, metal, ...
    . tags so that songs can be quick filtered for listening based on listeners mood
    . song provider can then choose random songs based on tags
  . fetch song metadata from some sites
    . do a sound search and ask user to pick song name after showing the search results
  . a song recommender using yt recommendation with filters
    . filters like:
      . dont show from known artists
      . filter known songs
  . multiple profiles with simple way to switch from cli args
    . profiles with different opts and different db


. rust based yt api stuff
  . none of the rust ones have functionality for searching albums
  . invidious is quite good
  . rafy might also be good for replacing ytdl
  . https://crates.io/crates/invidious
  . (not rust) https://github.com/sigma67/ytmusicapi/
  . https://docs.rs/rafy/0.2.1/rafy/struct.Rafy.html
  . https://github.com/TymanWasTaken/ytmusic-rs
  . https://github.com/smoqadam/rust-youtube-downloader
  . https://docs.rs/ytextract/0.11.0/ytextract/
  . https://docs.rs/rustube/0.3.8/rustube/
  . https://github.com/Siriusmart/youtube-tui/blob/master/Cargo.toml
  . https://github.com/j0lol/rs-youtube/blob/main/src/backend/youtube/search.rs
  . another project - https://github.com/sudipghimire533/ytui-music

. sixel links
    . https://github.com/saitoha/libsixel
    . https://askubuntu.com/questions/97542/how-do-i-make-my-terminal-display-graphical-pictures
    . https://docs.rs/viuer/latest/viuer/
    . https://crates.io/crates/sixel-sys
    . https://crates.io/crates/sixel
    . https://lib.rs/crates/hunter
    . https://github.com/seebye/ueberzug

    . https://github.com/meh/rust-sixel     -- uses a different library
    . https://docs.rs/control-code/0.7.1/control_code/DEC/SIXEL/enum.Color.html

    . https://crates.io/crates/termplay
    . https://github.com/jD91mZM2/termplay
    . https://github.com/jD91mZM2/termplay/blob/master/src/converters/sixel.rs


. ui
    . https://github.com/veeso/tui-realm (depends on tui-rs)
    . https://github.com/fdehau/tui-rs
    . lower level
        . https://github.com/redox-os/termion
        . https://github.com/crossterm-rs/crossterm

. gstreamer resources 
  . https://github.com/sdroege/gstreamer-rs/
  . https://slomo.pages.freedesktop.org/rustdocs/gstreamer/gstreamer_player/struct.Player.html
  . https://brettviren.github.io/pygst-tutorial-org/pygst-tutorial.html
  . https://gstreamer.freedesktop.org/documentation/tutorials/playback/short-cutting-the-pipeline.html?gi-language=c
  . examples
    . https://github.com/lerouxrgd/streamlet/blob/master/src/player.rs

. mpris -> https://github.com/tramhao/termusic

. mpv
  . resources
    . https://docs.rs/mpv/0.2.3/mpv/struct.MpvHandler.html
    . https://mpv.io/manual/master/#list-of-input-commands
  . examples
    . https://github.com/sevagh/surge/
    . https://github.com/Cobrand/mpv-rs/blob/master/examples/simple.rs
    
. low level rodio usage
  . https://github.com/librespot-org/librespot/blob/dev/playback/src/audio_backend/rodio.rs
